/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int> > pathSum(TreeNode *root, int sum) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int>> result;
        vector<int> path;

        if (root==NULL) return result;
        if (root->left==NULL && root->right==NULL){
            if (root->val == sum){
                path.push_back(sum);
                result.push_back(path);    
                return result;
            }
        }
        vector<vector<int>> p;
        
        p = pathSum(root->left, sum-root->val);
        for (int i=0;i<p.size();i++){
            path.assign(1, root->val);
            for(int j=0;j<p[i].size();j++){
                path.push_back(p[i][j]);
            }            
            result.push_back(path);
        }

        p = pathSum(root->right, sum-root->val);
        for (int i=0;i<p.size();i++){
            path.assign(1, root->val);
            for(int j=0;j<p[i].size();j++){
                path.push_back(p[i][j]);
            }            
            result.push_back(path);
        }        
        
        return result;
    }
};