class Solution {
public:
    int search1(vector<vector<int> > &matrix, int target, int l, int r){
        if (l>r) return -1;
        if (l==r && matrix[l][0] == target) return -2;
        if (target<matrix[l][0]) return -1;
        if (target>matrix[r][0]) return r;
        
        int mid = (l+r+1)/2;
        
        if (target>matrix[mid][0]) return search1(matrix, target, mid, r);
        if (target<matrix[mid][0]) return search1(matrix, target, l, mid-1);
        else return -2;
        
    }
    
    bool search2(vector<int> &row, int target,  int l, int r){
        if (l>r) return false;
        if (l==r && row[l] == target) return true;
        if (target < row[l]) return false;
        if (target > row[r]) return false;
        
        int mid = (l+r)/2;
        
        if (target>row[mid]) return search2(row, target, mid+1, r);
        if (target<row[mid]) return search2(row, target, l, mid-1);
        else return true;
    }

    bool searchMatrix(vector<vector<int> > &matrix, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int row = search1(matrix, target, 0, matrix.size()-1);
        if (row==-1) return false;
        if (row==-2) return true;
        return search2(matrix[row], target, 0, matrix[row].size()-1);
    }
};