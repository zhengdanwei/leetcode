/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int index;
    TreeNode *build(vector<int> &preorder, vector<int> &inorder, int l, int r){
        if(l>r) return NULL;
        int i;
        for (i=l;i<=r;i++){
            if (preorder[index] == inorder[i]) break;
        }
        TreeNode *p = new TreeNode(preorder[index]);
        index++;
        p->left = build(preorder, inorder, l, i-1);
        p->right = build(preorder, inorder, i+1, r);
        return p;        
    }


    TreeNode *buildTree(vector<int> &preorder, vector<int> &inorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        index = 0;
        return build(preorder, inorder, 0, inorder.size()-1);        
    }
};