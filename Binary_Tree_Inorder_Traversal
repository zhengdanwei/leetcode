/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
//虽然过不了不过大致可以代表我心中递归转迭代的标准方式
public:
    vector<int> inorderTraversal(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<int> result;
        TreeNode *p = root;
        vector<TreeNode*> path;
        vector<int> status;
        
        status[0]=0;
        int i=0;
        while(1){
            if (path.size() == 0) break;

            if (status[i] == 0){
                p = path.back()->left;
                if (p!=NULL){
                    path.push_back(p);
                    status[++i]=0;
                }
            }else if (status[i]==1){
                result.push_back(p->val);
                status[i]++;
            }else if (status[i]==2){
                p = path.back()->right;
                if (p!=NULL){
                    path.push_back(p);
                    status[++i]=0;
                }                
            }else if (status[i]==3){
                path.pop_back();
                status[--i]++;
            }
        }
        
        return result;
    }
};