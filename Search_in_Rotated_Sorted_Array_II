class Solution {
public:
    bool find(int A[], int l, int r, int target){
        if (l>r) return false;
        if (l==r){
            if (target==A[l]) return true;
            else return false;
        }
        
        int mid = (l+r)/2;
        
        if (A[mid]<A[l]){
            if (A[mid]<target) {
                if (find(A, mid+1, r, target)) return true;
                else return find(A, l, mid-1, target);                
            }
            else if (A[mid]>target) return find(A, l, mid-1, target);
            else return true;
         
        }
        else if (A[mid]>A[l]){
            if (A[mid]>target){
                if (find(A, mid+1, r, target)) return true;
                else return find(A, l, mid-1, target);                                
            }
            else if (A[mid]<target) return find(A, mid+1, r, target);
            else return true;
        }else{
            if (target == A[l]) return true;
            else return find(A, mid+1, r, target);
        }
    }
    

    bool search(int A[], int n, int target) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        
        return find(A, 0, n-1, target);
    }
};