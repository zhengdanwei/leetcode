class Solution {
public:
    string padding(vector<string> &words, int L, int start, int end){
        int sum=0;
        for (int i = start; i<end;i++){
            sum+=words[i].length();
        }
        int padlen = L - sum;
        
        int num = end - start;
        
        string result="";
        
        for (int i = start; i<end; i++){
            num--;
            result.append(words[i]);
            int l;
            if (num>0) l = (padlen-1)/num+1;
            else l = padlen;
            result.append(l, ' ');
            padlen -= l;
        }
        return result;
    }
    
    vector<string> fullJustify(vector<string> &words, int L) {
        int sum;
        vector<string> result;
        if (words.size()==0) return result;
        else sum = words[0].length();
        int i,j=0;
        
        for (i=1;i<words.size();i++){
            sum += words[i].length() + 1;
            if (sum>L){
                result.push_back(padding(words,L,j,i));
                sum = words[i].length();
                j = i;
            }
        }
        
        string lastline = padding(words, sum, j, i); 
        lastline.append(L-sum, ' ');
        result.push_back(lastline);
        
        return result;
    }
};