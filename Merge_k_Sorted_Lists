/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    int findMin(vector<ListNode *> &lists){
        int result;
        bool flag = false;
        int min;
        for (int i=0;i<lists.size();i++){
            if (lists[i]!=NULL){
                if (!flag){
                    flag=true;
                    min = lists[i]->val;
                    result=i;
                }else if(lists[i]->val < min){
                    min = lists[i]->val;
                    result=i;
                }
            }            
        }
        
        if (!flag) return -1;
        else return result;
    }

    ListNode *mergeKLists(vector<ListNode *> &lists) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        ListNode *head;
        ListNode *p;
        
        int i = findMin(lists);
        if (i==-1) return NULL;
        p = lists[i];
        head = p;
        lists[i] = lists[i]->next;
        
        while (1){
            i = findMin(lists);
            if (i==-1)  break;
            p->next = lists[i];
            p = p->next;
            lists[i] = lists[i]->next;
        }
        return head;
    }
};