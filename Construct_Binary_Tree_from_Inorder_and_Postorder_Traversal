/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
//可以用迭代的方法做吗？
public:
    int index;
    TreeNode *build(vector<int> &inorder, int l, int r, vector<int> &postorder){
        if(l>r) return NULL;
        int i;
        for (i=l;i<=r;i++){
            if (postorder[index] == inorder[i]) break;
        }
        TreeNode *p = new TreeNode(postorder[index]);
        index--;
        p->right = build(inorder, i+1, r, postorder);
        p->left  = build(inorder, l, i-1, postorder);
        return p;        
    }
    
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        index = postorder.size()-1;
        return build(inorder, 0, inorder.size()-1, postorder);
    }
};