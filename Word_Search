class Solution {
public:
    bool inboard(pair<int,int> crdt, vector<vector<char>>& board){
        if (crdt.first<0 || crdt.second<0) return false;
        if (crdt.first>=board.size() || crdt.second>=board[0].size()) return false;
        return true;
    }
    
    bool findNext(vector<vector<char>> &board, int i, int x0, int y0, vector<pair<int, int>> &delta, vector<vector<bool>> &visited, string & word){
        if (i==word.length()) return true;
        
        for (int k=0;k<4;k++){
            int x = x0 + delta[k].first;
            int y = y0 + delta[k].second;
            if (inboard(make_pair(x,y), board) && board[x][y]==word[i] && !visited[x][y]) {
                visited[x][y] = true;               
                if (findNext(board, i+1, x, y, delta, visited, word)) return true;
                visited[x][y] = false;                      
             } 
        }
        
        return false;
    }

    bool exist(vector<vector<char> > &board, string word) {
        vector<vector<bool>> visited;
        
        if (word.length()==0) return true;
        
        int n = board.size();
        if (n==0) return false;
        int m = board[0].size();
        if (m==0) return false;
        
        if (word.length()>m*n) return false;
        
        visited.assign(n, vector<bool>(m,false));

        vector<pair<int, int>> delta;
        delta.push_back(make_pair(1,0));
        delta.push_back(make_pair(-1,0));        
        delta.push_back(make_pair(0,-1));        
        delta.push_back(make_pair(0,1));   
        
        for (int i=0;i<n;i++){
            for (int j=0;j<m;j++){
                if (board[i][j] == word[0]){ //去年买了表这里忘记加括号TLE了好久啊啊啊啊
                    visited[i][j] = true;
                    if (findNext(board, 1, i, j, delta, visited, word)) return true;
                    visited[i][j] = false;
                }
            }
        }
        return false;
    }
};